from typing import Any, Dict, Optional, Union
from _typeshed import ReadableBuffer

import helpers.wibotic.core.packettools as pt

class ParsedIncomingType: ...

class ADCUpdate(ParsedIncomingType):
    device: pt.DeviceID
    values: Dict[pt.AdcID, Union[int, float]]
    def __init__(self, device, values) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> ADCUpdate: ...

class ParamUpdate(ParsedIncomingType):
    device: pt.DeviceID
    param: pt.ParamID
    value: int
    status: pt.ParamStatus
    location: pt.ParamLocation
    def __init__(self, device, param, value, status, location) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> ParamUpdate: ...

class ParamResponse(ParsedIncomingType):
    device: pt.DeviceID
    param: pt.ParamID
    status: pt.ParamStatus
    data: int
    location: pt.ParamLocation
    def __init__(self, device, param, status, data, location) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> ParamResponse: ...

class StageResponse(ParsedIncomingType):
    device: pt.DeviceID
    param: pt.ParamID
    status: pt.ParamStatus
    def __init__(self, device, param, status) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> StageResponse: ...

class CommitResponse(ParsedIncomingType):
    device: pt.DeviceID
    status: pt.ParamStatus
    def __init__(self, device, status) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> CommitResponse: ...

class ConnectedDevices(ParsedIncomingType):
    devices: Set[pt.DeviceID]
    def __init__(self, device_list) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> ConnectedDevices: ...

class IncomingMessage(ParsedIncomingType):
    device: pt.DeviceID
    level: int
    message: str
    def __init__(self, device, level, message) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> IncomingMessage: ...

class ExtendedParameterResponse(ParsedIncomingType):
    device: pt.DeviceID
    ext_id: pt.ExtParamID
    data: Any
    def __init__(self, device, ext_id, data) -> None: ...
    def parse(self): ...
    @property
    def value(self): ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> ExtendedParameterResponse: ...

class ExtendedParameterSetResponse(ExtendedParameterResponse):
    status: pt.ParamStatus
    def __init__(self, device, ext_id, status, data) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> ExtendedParameterSetResponse: ...

class IncomingAssociation(ParsedIncomingType):
    device: pt.DeviceID
    rssi: int
    mac: int
    def __init__(self, rssi, mac) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> IncomingAssociation: ...

class IncomingOTAStatus(ParsedIncomingType):
    device: pt.DeviceID
    completion: int
    state: Any
    def __init__(self, completion, state) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> IncomingOTAStatus: ...

class DataRequest: ...

class RequestConnectionStatus(DataRequest):
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> RequestConnectionStatus: ...

class ParamReadRequest(DataRequest):
    dest: pt.DeviceID
    param: pt.ParamID
    location: Optional[pt.ParamLocation]
    def __init__(
        self,
        destination_device: pt.DeviceID,
        parameter: pt.ParamID,
        location: Optional[pt.ParamLocation] = ...,
    ) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> ParamReadRequest: ...

class ParamWriteRequest(DataRequest):
    dest: pt.DeviceID
    param: pt.ParamID
    value: int
    location: Optional[pt.ParamLocation]
    def __init__(
        self,
        destination_device: pt.DeviceID,
        parameter: pt.ParamID,
        new_value: int,
        location: Optional[pt.ParamLocation] = ...,
    ) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> ParamWriteRequest: ...

class ParamStageRequest(DataRequest):
    dest: pt.DeviceID
    param: pt.ParamID
    def __init__(
        self, destination_device: pt.DeviceID, parameter: pt.ParamID
    ) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> ParamStageRequest: ...

class ParamCommitRequest(DataRequest):
    dest: pt.DeviceID
    def __init__(self, destination_device: pt.DeviceID) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> ParamCommitRequest: ...

class SubscribeRequest(DataRequest):
    topic: pt.Topic
    def __init__(self, topic: pt.Topic) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> SubscribeRequest: ...

class UnsubscribeRequest(DataRequest):
    topic: pt.Topic
    def __init__(self, topic: pt.Topic) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> UnsubscribeRequest: ...

class ExtendedWriteRequest(DataRequest):
    dest: pt.DeviceID
    ext_id: pt.ExtParamID
    data: Any
    def __init__(
        self, destination_device: pt.DeviceID, ext_id: pt.ExtParamID, data
    ) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> ExtendedWriteRequest: ...

class ExtendedReadRequest(DataRequest):
    dest: pt.DeviceID
    ext_id: pt.ExtParamID
    def __init__(
        self, destination_device: pt.DeviceID, ext_id: pt.ExtParamID
    ) -> None: ...
    def as_packet(self) -> bytearray: ...
    def parse_packet(self, data: ReadableBuffer) -> ExtendedReadRequest: ...
